#lang planet neil/sicp
(define (smallest-divisor n)
  (find-divisor n 2))
(define (next-divisor n)
  (if (= n 2)
      3
      (+ n 2)))
(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (next-divisor test-divisor)))))
(define (square n) (* n n))
(define (divides? a b)
  (= (remainder b a) 0))
(define (prime? n)
  (= n (smallest-divisor n)))
(define (sum term a next b)
  (if (> a b)
      0
      (+ (term a)
         (sum term (next a) next b))))
(define (inc n) (+ n 1))
(define (sum-cubes a b)
  (sum cube a inc b))
(define (cube x) (* x x x))
(define (identity x) x)
(define (sum-integers a b)
  (sum identity a inc b))
(define (pi-sum a b)
  (define (pi-term x)
    (/ 1.0 (* x (+ x 2))))
  (define (pi-next x)
    (+ x 4))
  (sum pi-term a pi-next b))
(define (integral f a b dx)
  (define (add-dx x) (+ x dx))
  (* (sum f (+ a (/ dx 2.0)) add-dx b)
     dx))
(define (simpson-integral f a b n)
  (let ((h (/ (- b a) n)))
    (define (simpson-term k)
      (* (f (+ a (* k h)))
         (cond ((or (= k 0) (= k n)) 1)
               ((even? k) 2)
               (else 4))))
    (* (/ h 3.0)
       (sum simpson-term 0 inc n))))

(define (even? k)
  (if (= (remainder k 2) 0) 
      true
      false))
(define (sum-iter term a next b)
  (define (iter a result)
    (if (= a b) result
        (iter (next a) (+ result (term a)))))
  (iter a 0))
(define (product term a next b)
  (if (> a b) 1
      (* (term a) (product term (next a) next b))))
(define (factorial n)
  (product * 1 inc n))
(define (wallis-pi n)
  (define (wallis-term k)
    (let ((norm
           (if (even? k)
               (+ k 2)
               (+ k 1)))
          (denom
           (if (even? k)
               (+ k 1)
               (+ k 2))))
      (/ norm denom)))
    (* 4.0 (product wallis-term 1 inc n)))
(define (accumulator combiner null-value term a next b)
  (if (> a b)
      null-value
      (combiner
       (term a)
       (accumulator combiner null-value term (next a) next b))))
(define (sum2 term a next b)
  (accumulator-iter + 0 term a next b))
(define (accumulator-iter combiner null-value term a next b)
  (define (iter a result)
    (if (> a b)
        result
        (iter (next a) 
              (combiner (term a) result))))
  (iter a null-value))
(define (filtered-accumulator combiner null-value term a next b filter)
  (cond ((> a b) null-value)
        ((filter a)
         (combiner 
          (term a)
          (filtered-accumulator combiner null-value term (next a) next b filter)))
        (else (filtered-accumulator combiner null-value term (next a) next b filter))))
(define (sum-squares-of-primes a b)
  (filtered-accumulator + 0 square a inc b prime?))
(define (pi-sum-lam a b)
  (sum (lambda (x) (/ 1.0 (* x (+ x 2))))
       a
       (lambda (x) (+ x 4))
       b))
(define (average x y) (/ (+ x y) 2.0))
(define (close-enough? x y)
  (< (abs (- x y)) 0.0001))
(define (search f neg-point pos-point)
  (let ((mid-point (average neg-point pos-point)))
    (if (close-enough? neg-point pos-point)
        mid-point
        (let ((test-value (f mid-point)))
          (cond ((positive? test-value)
                 (search f neg-point mid-point))
                ((negative? test-value) 
                 (search f mid-point pos-point))
                (else mid-point))))))
(define (half-interval-method f a b)
  (let ((a-value (f a))
        (b-value (f b)))
    (cond ((and (negative? a-value) (positive? b-value))
           (search f a b))
          ((and (negative? b-value) (positive? a-value))
           (search f b a))
          (else
           (error "values are not of opposite sign" a b)))))
(define tolerance 0.00001)
(define (fixed-point f first-guess)
  (define (close-enough? v1 v2) 
    (< (abs (- v1 v2)) tolerance))
  (define (try guess)
    (display guess)
    (newline)
    (let ((next (f guess)))
      (if (close-enough? guess next)
          next
          (try next))))
  (try first-guess))
(define (sqrt2 x)
  (fixed-point (lambda (y) (average y(/ x y))) 1.0))
(define (cont-frac n d k)
  (define (frac i)
    (/ (n i)
       (+ 
        (d i)
        (if (= i k)
            0
            (frac (+ 1 i))))))
  (frac 1))
(define (average-damp f)
  (lambda (x) (average x (f x))))
(define (sqrt3 x)
  (fixed-point (average-damp (lambda (y) (/ x y)))
               1.0))
(define (deriv g)
  (lambda (x)
    (/ 
     (- (g (+ x dx)) (g x))
     dx)))
(define dx 0.00001)
(define (newton-transform g)
  (lambda (x)
    (- x (/ (g x) ((deriv g) x)))))
(define (newtons-method g guess)
  (fixed-point (newton-transform g) guess))
(define (sqrt4 x) 
  (newtons-method (lambda (y) (- (square y) x))
                   1.0))
(define (fixed-point-of-transform g transform guess)
  (fixed-point (transform g) guess))
(define (sqrt5 x)
  (fixed-point-of-transform 
   (lambda (y) (- (square y) x))
   newton-transform
   1.0))
(define (cubic a b c)
  (lambda (x)
    (+
     (cube x)
     (* a (square x))
     (* b x))))
(define (double f)
  (lambda (x)
    (f (f x))))
(define (compose f g)
  (lambda (x)
    (f (g x))))
(define (repeated f n)
  (if (= n 0)
      identity
      (compose f (repeated f (- n 1)))))
(define (smooth f)
  (lambda (x)
    (/
     (+
      (f (- x dx))
      (f x)
      (f (+ x dx)))
     3)))
(define (n-fold-smooth f n)
  (repeated smooth n) f)
(define (dampen-root x n)
  (fixed-point 
   (lambda (y)
     (average y (/ x (expt y (- n 1)))))
   1.0))
(define (repeated-dampen-root x n)
  (define (log2 x)
    (/ (log x) (log 2)))
  (let ((mtimes (floor (log2 n))))
    (fixed-point-of-transform
     (lambda (y)
       (/ x (expt y (- n 1))))
     (repeated average-damp mtimes)
     1.0)))
(define (iterative-improve good-enough? improve-guess)
  (lambda (guess)
    (if (good-enough? guess)
        guess
        ((iterative-improve good-enough? improve-guess)
         (improve-guess guess)))))
(define (improved-fixed-point f guess)
  (define (good-enough? guess)
    (let ((next-guess (f guess)))
      (< (abs (- next-guess guess)) 0.0001)))
  (define improve-guess f)
  ((iterative-improve good-enough? improve-guess) guess))
