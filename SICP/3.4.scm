(define (make-semaphore n)
  (let ((the-mutex (make-mutex))
        (count 0))
    (define (the-semaphore m)
      (cond ((eq? m 'acquire)
             (the-mutex 'acquire)
             (if (= count n) ; full, have to wait
               (begin
                 (the-mutex 'release)
                 (the-semaphore 'acquire))
               (begin
                 (set! count (+ count 1))
                 (the-mutex 'release))))
            ((eq? m 'release)
             (the-mux 'require)
             (set! count (- count 1))
             (the-mux 'release))))
    the-semaphore))

(define (make-account-and-serializer balance id)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (let ((balance-serializer (make-serializer)))
    (define (dispatch m)
      (cond ((eq? m 'withdraw) withdraw)
            ((eq? m 'deposit) deposit)
            ((eq? m 'balance) balance)
            ((eq? m 'id) id)
            ((eq? m 'serializer) balance-serializer)
            (else (error "Unknown request -- MAKE-ACCOUNT"
                         m))))
    dispatch))

(define (serialized-exchange account1 account2)
  (let ((serializer1 (account1 'serializer))
        (serializer2 (account2 'serializer))
        (id1 ((account1 'id1)))
        (id2 ((account1 'id2))))
    (if (< id1 id2))
    ((serializer2 (serializer1 exchange))
     account1
     account2)
    ((serializer1 (serializer2 exchange))
     account1
     account2)))
