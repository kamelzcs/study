#lang planet neil/sicp
(define (install-deriv-package)
  (define (=number? exp num)
    (and (number? exp) (= exp num))) 

  ; sum
  (define (make-sum a1 a2)
    (cond ((=number? a1 0) a2)
          ((=number? a2 0) a1)
          ((and (number? a1) (number? a2)) (+ a1 a2))
          (else (list '+ a1 a2))))
  (define (addend opds) (car opds))
  (define (augend opds) (cadr opds))
  (define (deriv-sum opds var)
    (make-sum (deriv (addend opds) var)
              (deriv (augend opds) var)))

  ; product
  (define (make-product m1 m2)
    (cond ((or (=number? m1 0) (=number? m2 0)) 0)
          ((=number? m1 1) m2)
          ((=number? m2 1) m1)
          ((and (number? m1) (number? m2)) (* m1 m2))
          (else (list '* m1 m2))))
  (define (multiplier opds) (car opds))
  (define (multiplicand opds) (cadr opds))
  (define (deriv-product opds var) 
    (make-sum 
     (make-product (multiplier opds)
                   (deriv (multiplicand opds) var))
     (make-product (deriv (multiplier opds) var)
                   (multiplicand opds))))

  ; exponentiation
  (define (make-exponentiation base exp)
    (cond ((=number? exp 0) 1)
          ((=number? exp 1) base)
          (else (list '** base exp))))
  (define (base opds) (car opds))
  (define (exponent opds) (cadr opds))
  (define (deriv-exponentation opds var)
    (make-product
     (exponent opds)
     (make-product
      (make-exponentiation (base opds)
                           (make-sum (exponent opds) (- 1)))
      (deriv (base opds) var))))

  ;; interface
  (put 'deriv '+ deriv-sum)
  (put 'deriv '* deriv-product)
  (put 'deriv '** deriv-exponentation) 
  'done)
(define get 2d-get)
(define put 2d-put!)

(define (variable? x) (symbol? x))
(define (same-variable? v1 v2)
  (and (variable? v1) (variable? v2) (eq? v1 v2)))
(define (deriv exp var)
   (cond ((number? exp) 0)
         ((variable? exp) (if (same-variable? exp var) 1 0))
         (else ((get 'deriv (operator exp)) (operands exp)
                                            var))))
(define (operator exp) (car exp))
(define (operands exp) (cdr exp))